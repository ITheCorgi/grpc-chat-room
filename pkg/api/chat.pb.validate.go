// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chat.proto

package chat

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConnectRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConnectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConnectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectRequestMultiError,
// or nil if none found.
func (m *ConnectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConnectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := ConnectRequestValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConnectRequestMultiError(errors)
	}

	return nil
}

// ConnectRequestMultiError is an error wrapping multiple validation errors
// returned by ConnectRequest.ValidateAll() if the designated constraints
// aren't met.
type ConnectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectRequestMultiError) AllErrors() []error { return m }

// ConnectRequestValidationError is the validation error returned by
// ConnectRequest.Validate if the designated constraints aren't met.
type ConnectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectRequestValidationError) ErrorName() string { return "ConnectRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConnectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectRequestValidationError{}

// Validate checks the field values on GroupChannelNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GroupChannelNameRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GroupChannelNameRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GroupChannelNameRequestMultiError, or nil if none found.
func (m *GroupChannelNameRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GroupChannelNameRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetGroupChannelName()) < 1 {
		err := GroupChannelNameRequestValidationError{
			field:  "GroupChannelName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GroupChannelNameRequestMultiError(errors)
	}

	return nil
}

// GroupChannelNameRequestMultiError is an error wrapping multiple validation
// errors returned by GroupChannelNameRequest.ValidateAll() if the designated
// constraints aren't met.
type GroupChannelNameRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GroupChannelNameRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GroupChannelNameRequestMultiError) AllErrors() []error { return m }

// GroupChannelNameRequestValidationError is the validation error returned by
// GroupChannelNameRequest.Validate if the designated constraints aren't met.
type GroupChannelNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GroupChannelNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GroupChannelNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GroupChannelNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GroupChannelNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GroupChannelNameRequestValidationError) ErrorName() string {
	return "GroupChannelNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GroupChannelNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGroupChannelNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GroupChannelNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GroupChannelNameRequestValidationError{}

// Validate checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChatMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChatMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChatMessageMultiError, or
// nil if none found.
func (m *ChatMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ChatMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetMessage()) < 1 {
		err := ChatMessageValidationError{
			field:  "Message",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	switch m.Destination.(type) {

	case *ChatMessage_GroupChannelName:

		if utf8.RuneCountInString(m.GetGroupChannelName()) < 1 {
			err := ChatMessageValidationError{
				field:  "GroupChannelName",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ChatMessage_Username:

		if utf8.RuneCountInString(m.GetUsername()) < 1 {
			err := ChatMessageValidationError{
				field:  "Username",
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return ChatMessageMultiError(errors)
	}

	return nil
}

// ChatMessageMultiError is an error wrapping multiple validation errors
// returned by ChatMessage.ValidateAll() if the designated constraints aren't met.
type ChatMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChatMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChatMessageMultiError) AllErrors() []error { return m }

// ChatMessageValidationError is the validation error returned by
// ChatMessage.Validate if the designated constraints aren't met.
type ChatMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChatMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChatMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChatMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChatMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChatMessageValidationError) ErrorName() string { return "ChatMessageValidationError" }

// Error satisfies the builtin error interface
func (e ChatMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChatMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChatMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChatMessageValidationError{}

// Validate checks the field values on Channels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Channels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Channels with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelsMultiError, or nil
// if none found.
func (m *Channels) ValidateAll() error {
	return m.validate(true)
}

func (m *Channels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelsValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelsValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChannelsMultiError(errors)
	}

	return nil
}

// ChannelsMultiError is an error wrapping multiple validation errors returned
// by Channels.ValidateAll() if the designated constraints aren't met.
type ChannelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelsMultiError) AllErrors() []error { return m }

// ChannelsValidationError is the validation error returned by
// Channels.Validate if the designated constraints aren't met.
type ChannelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelsValidationError) ErrorName() string { return "ChannelsValidationError" }

// Error satisfies the builtin error interface
func (e ChannelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelsValidationError{}

// Validate checks the field values on Channels_Channel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Channels_Channel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Channels_Channel with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Channels_ChannelMultiError, or nil if none found.
func (m *Channels_Channel) ValidateAll() error {
	return m.validate(true)
}

func (m *Channels_Channel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GroupChannelName

	// no validation rules for Type

	if len(errors) > 0 {
		return Channels_ChannelMultiError(errors)
	}

	return nil
}

// Channels_ChannelMultiError is an error wrapping multiple validation errors
// returned by Channels_Channel.ValidateAll() if the designated constraints
// aren't met.
type Channels_ChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Channels_ChannelMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Channels_ChannelMultiError) AllErrors() []error { return m }

// Channels_ChannelValidationError is the validation error returned by
// Channels_Channel.Validate if the designated constraints aren't met.
type Channels_ChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Channels_ChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Channels_ChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Channels_ChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Channels_ChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Channels_ChannelValidationError) ErrorName() string { return "Channels_ChannelValidationError" }

// Error satisfies the builtin error interface
func (e Channels_ChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannels_Channel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Channels_ChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Channels_ChannelValidationError{}
